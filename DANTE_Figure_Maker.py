# -*- coding: utf-8 -*-
"""
Created on Sat Mar 29 15:39:50 2025

This Python script reads multiple .csv files generated by DANTE.py and plots the data for analysis. 
It is not an interactive script; all inputs are manually specified in the code.

@author: Diego Garc√≠a Tejada
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import ScalarFormatter
import matplotlib.lines as mlines
import seaborn as sns
import pandas as pd

###############################################################################
# MR curves of NS
###############################################################################
"""
# READ THE DATA
data = {}

s_type = 1
d_type = 1
EsOS = ['soft', 'middle', 'stiff']

for eos_c in EsOS:
    df = pd.read_csv(f"data\{s_type}_{d_type}_{eos_c}.csv")
    data[f"{eos_c}"] = df
    
# PLOT THE DATA
# Configure the plot
plt.figure(figsize=(9.71, 6))
colors = sns.color_palette("Set1", 10)
eos_colors = {"soft": 0, "middle": 1, "stiff": 2}

for eos_c in EsOS:
    c = eos_colors[eos_c]
    plt.plot(data[f"{eos_c}"]["R"], data[f"{eos_c}"]["M"], label = rf'{eos_c}', color = colors[c], linewidth = 1.5, linestyle = '-', marker = "*",  mfc='k', mec = 'k', ms = 5)

# Add labels and title
plt.title(r'MR curves for the NS', loc='left', fontsize=15, fontweight='bold')
plt.xlabel(r'$R$ $\left[km\right]$', fontsize=15, loc='center')
plt.ylabel(r'$M$ $\left[ M_{\odot} \right]$', fontsize=15, loc='center')

# Set limits
plt.xlim(8, 17)
plt.ylim(0, 3.5)

# Configure ticks for all four sides
plt.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True, right=True)
plt.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True, right=True)
plt.minorticks_on()

# Customize tick spacing 
plt.gca().set_xticks(np.arange(8, 17.1, 1))  # Major x ticks 
plt.gca().set_yticks(np.arange(0, 3.51, 0.5))  # Major y ticks 

# Set thicker axes
plt.gca().spines['top'].set_linewidth(1.5)
plt.gca().spines['right'].set_linewidth(1.5)
plt.gca().spines['bottom'].set_linewidth(1.5)
plt.gca().spines['left'].set_linewidth(1.5)

# Add a legend
plt.legend(fontsize=15, loc = "upper left", bbox_to_anchor=(0.009, 0.99), frameon=True, fancybox=False, ncol = 1, edgecolor="black", framealpha=1, labelspacing=0.2, handletextpad=0.3, handlelength=1.4, columnspacing=1)

# Save plot as PDF
plt.tight_layout()
plt.savefig("figures\MR_curves_NS.pdf", format="pdf", bbox_inches="tight")

plt.show()
"""
###############################################################################
# Stiffness test for NSs
###############################################################################
"""
# READ THE DATA
data = {}

s_type = 1
d_type = 0
EsOS = ['soft', 'middle', 'stiff']
p1_c = 'M'
p1_v = 1.5

for eos_c in EsOS:
    df = pd.read_csv(f"data\{s_type}_{d_type}_{eos_c}_{p1_c}_{p1_v}.csv")
    data[f'{eos_c}'] = df

# PLOT THE DATA
# Configure the plot
fig, ax1 = plt.subplots(figsize=(9.71, 6))
colors = sns.color_palette("Set1", 10)
eos_colors = {"soft": 0, "middle": 1, "stiff": 2}

# Plot the pressure
for eos_c in EsOS:
    c = eos_colors[eos_c]
    ax1.plot(data[f'{eos_c}']['r'], data[f'{eos_c}']['p_A'], label=rf'$p_{{{eos_c}}}(r)$', color = colors[c], linewidth=1.5, linestyle='-')
ax1.set_xlabel(r'$r$ $\left[km\right]$', fontsize=15, loc='center')
ax1.set_ylabel(r'$p$ $\left[ M_{\odot} / km^3 \right]$', fontsize=15, loc='center', color='k')
ax1.tick_params(axis='y', colors='k')
ax1.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))
ax1.ticklabel_format(style='sci', axis='y', scilimits=(-3, 3))

# Plot the mass
ax2 = ax1.twinx()
for eos_c in EsOS:
    c = eos_colors[eos_c]
    ax2.plot(data[f'{eos_c}']['r'], data[f'{eos_c}']['m'], label=rf'$m_{{{eos_c}}}(r)$', color = colors[c], linewidth=1.5, linestyle='--')
ax2.set_ylabel(r'$m$ $\left[ M_{\odot} \right]$', fontsize=15, loc='center', color='k')
ax2.tick_params(axis='y', colors='k')

# Set limits
if True == True:
    ax1.set_xlim(0, 13.93)
    ax1.set_ylim(0, 1.3e-4)
    ax2.set_ylim(0, 2)

# Configure ticks
ax1.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True)
ax1.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True)
ax1.minorticks_on()
ax2.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True, right=True)
ax2.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True, right=True)
ax2.minorticks_on()

# Configure ticks spacing
if True == True:
    ax1.set_xticks(np.arange(0, 13.93, 1))
    #ax1.set_xticks(np.arange(0, 9.6, 0.2), minor=True)
    ax1.set_yticks(np.arange(0, 1.31e-4, 0.1e-4))
    ax1.set_yticks(np.arange(0, 1.31e-4, 0.025e-4), minor=True)
    ax2.set_yticks(np.arange(0, 2.01, 0.2))
    #ax2.set_yticks(np.arange(0, 1.01, 0.02), minor=True)

# Set thicker axes
for ax in [ax1, ax2]:
    ax.spines['top'].set_linewidth(1.5)
    ax.spines['right'].set_linewidth(1.5)
    ax.spines['bottom'].set_linewidth(1.5)
    ax.spines['left'].set_linewidth(1.5)
    ax.spines['top'].set_color('k')
    ax.spines['right'].set_color('k')
    ax.spines['bottom'].set_color('k')
    ax.spines['left'].set_color('k')
    
# Add a legend
soft = mlines.Line2D([], [], color=colors[0], linestyle='-', label=r"soft")
middle = mlines.Line2D([], [], color=colors[1], linestyle='-', label=r"middle")
stiff = mlines.Line2D([], [], color=colors[2], linestyle='-', label=r"stiff")
p = mlines.Line2D([], [], color='k', linestyle='-', label=r"$p(r)$")
m = mlines.Line2D([], [], color='k', linestyle='--', label=r"$m(r)$")
ax1.legend(handles=[soft, p, middle, m, stiff], loc = "upper right", bbox_to_anchor=(0.99, 0.99), fontsize=15, frameon=True, fancybox=False, ncol = 3, edgecolor="black", framealpha=1, labelspacing=0.2, handletextpad=0.3, handlelength=1.4, columnspacing=1)


# Save Fig as pdf
plt.title(rf'Stiffnes test for a NS: $M={p1_v}$'r'$\left[M_{\odot}\right]$', loc='left', fontsize=15, fontweight='bold')
plt.tight_layout()
plt.savefig(f"figures\stiffness_test_NS_{p1_c}_{p1_v}.pdf", format="pdf", bbox_inches="tight")

plt.show()
"""
###############################################################################
# Dark Matter Mass Test (DMMT)
###############################################################################
"""
# READ THE DATA
data = {}

s_type = 3
d_type = 0
eos_c = 'soft'
dm_ms = ['0.4', '0.45', '0.5', '0.6', '0.8', '1.0', '1.2', '1.4', '1.6']
p1_c = 'M'
p1_v = 1.0
p2_c = 'l'
p2_v = 0.1

for dm_m in dm_ms:
    df = pd.read_csv(f"data\{s_type}_{d_type}_{eos_c}_{dm_m}_{p1_c}_{p1_v}_{p2_c}_{p2_v}.csv")
    data[f"{dm_m}"] = df

# PLOT THE DATA
# Configure the plot
fig, ax1 = plt.subplots(figsize=(12, 6.5))
colors = sns.color_palette("Set1", 12)
c=0
styles = ["-", "-."]
s=0

# Plot the pressure
for dm_m in dm_ms:
    if c == 9:
        s+=1
    ax1.plot(data[f'{dm_m}']['r'], data[f'{dm_m}']['p_B'], label=r'$m_{\chi}=$'rf'{dm_m}', color = colors[c], linewidth=1.5, linestyle=styles[s])
    ax1.axvline(data[f'{dm_m}']['R_A'][0], color=colors[c], linewidth=1.0, linestyle=(c,[3.7, 1.6]))
    c+=1
ax1.set_xlabel(r'$r$ $\left[km\right]$', fontsize=15, loc='center')
ax1.set_ylabel(r'$p$ $\left[ M_{\odot} / km^3 \right]$', fontsize=15, loc='center', color='k')
ax1.tick_params(axis='y', colors='k')
ax1.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))
ax1.ticklabel_format(style='sci', axis='y', scilimits=(-3, 3))

# Set ax1_y to log scale
ax1.set_yscale('log')

# Set limits
if True == True:
    ax1.set_xlim(0, 17.5)
    ax1.set_ylim(1.8e-15, 2e-4)

# Configure ticks
ax1.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True, right=True)
ax1.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True, right=True)
ax1.minorticks_on()

# Configure ticks spacing
if True == True:
    ax1.set_xticks(np.arange(0, 17.51, 1))
    #ax1.set_xticks(np.arange(0, 9.6, 0.2), minor=True)
    ax1.set_yticks(np.logspace(-14, -4, num=11))
    #ax1.set_yticks(np.arange(0, 8.1e-5, 0.2e-5), minor=True)

# Set thicker axes
for ax in [ax1]:
    ax.spines['top'].set_linewidth(1.5)
    ax.spines['right'].set_linewidth(1.5)
    ax.spines['bottom'].set_linewidth(1.5)
    ax.spines['left'].set_linewidth(1.5)
    ax.spines['top'].set_color('k')
    ax.spines['right'].set_color('k')
    ax.spines['bottom'].set_color('k')
    ax.spines['left'].set_color('k')

# Add a legend
ax1.legend(loc = "upper right", bbox_to_anchor=(0.99, 0.99), fontsize=15, frameon=True, fancybox=False, ncol = 3, edgecolor="black", framealpha=1, labelspacing=0.2, handletextpad=0.3, handlelength=1.4, columnspacing=1)

# Save Fig as pdf
p2_values = {'a':r'\alpha', 'l':r'\lambda'}
p2 = p2_values[f"{p2_c}"]
plt.title(rf'Dark Matter Mass Test: $EoS={eos_c},$ ${p1_c}={p1_v}$'r'$\left[ M_{\odot} \right],$'rf' ${p2}={p2_v}$', loc='left', fontsize=15, fontweight='bold')
plt.tight_layout()
plt.savefig(f"figures\DMMT_{eos_c}_{p1_c}_{p1_v}_{p2_c}_{p2_v}.pdf", format="pdf", bbox_inches="tight")

plt.show()
"""
###############################################################################
# Lambda Sweep Test (LST)
###############################################################################
"""
data = {}
l_dic = {0.0 : 1.0, 0.05 : 1.053, 0.1 : 1.111, 0.15 : 1.176, 0.2 : 1.25, 0.25 : 1.333}

s_type = 3
d_type = 0
eos_c = 'soft'
dm_m = 1.0
p1_c = 'M'
p2_c = 'l'
l_list = keys_list = list(l_dic.keys())

for p2_v in l_list:
    p1_v = l_dic[p2_v]
    df = pd.read_csv(f"data\{s_type}_{d_type}_{eos_c}_{dm_m}_{p1_c}_{p1_v}_{p2_c}_{p2_v}.csv")
    data[f"{p2_v}"] = df

# Configure the plot
fig, ax1 = plt.subplots(figsize=(9.71, 6))
colors = sns.color_palette("Set1", 12)
c=0

# Set the axis.
ax1.set_xlabel(r'$r$ $\left[km\right]$', fontsize=15, loc='center')
ax1.set_ylabel(r'$p$ $\left[ M_{\odot} / km^3 \right]$', fontsize=15, loc='center', color='k')
ax1.tick_params(axis='y', colors='k')
ax1.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))
ax1.ticklabel_format(style='sci', axis='y', scilimits=(-3, 3))
ax2 = ax1.twinx()
ax2.set_ylabel(r'$m$ $\left[ M_{\odot} \right]$', fontsize=15, loc='center', color='k')
ax2.tick_params(axis='y', colors='k')

for p2_v in l_list:
    if c == 5:
        c+=1
    p1_v = l_dic[p2_v]
    ax1.plot(data[f"{p2_v}"]["r"], data[f"{p2_v}"]["p_A"], label='p_{{{eos_c}}}(r)', color=colors[c], linewidth=1.5, linestyle='-')
    ax1.plot(data[f"{p2_v}"]["r"], data[f"{p2_v}"]["p_B"], label='p_{{DM}}(r)', color=colors[c], linewidth=1.5, linestyle='-.')
    ax2.plot(data[f"{p2_v}"]["r"], data[f"{p2_v}"]["m"], label='m(r)', color=colors[c], linewidth=1.5, linestyle='--')
    c+=1
    
# Set limits
ax1.set_xlim(0, 9.86)
ax1.set_ylim(0, 3.5e-4)
ax2.set_ylim(0, 2)

# Configure ticks
ax1.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True)
ax1.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True)
ax1.minorticks_on()
ax2.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True, right=True)
ax2.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True, right=True)
ax2.minorticks_on()

# Configure ticks spacing
ax1.set_xticks(np.arange(0, 9.86, 1))
#ax1.set_xticks(np.arange(0, 9.6, 0.2), minor=True)
ax1.set_yticks(np.arange(0, 3.5e-4, 0.5e-4))
#ax1.set_yticks(np.arange(0, 8.1e-5, 0.2e-5), minor=True)
ax2.set_yticks(np.arange(0, 2.01, 0.25))
#ax2.set_yticks(np.arange(0, 1.01, 0.02), minor=True)

# Set thicker axes
for ax in [ax1, ax2]:
    ax.spines['top'].set_linewidth(1.5)
    ax.spines['right'].set_linewidth(1.5)
    ax.spines['bottom'].set_linewidth(1.5)
    ax.spines['left'].set_linewidth(1.5)
    ax.spines['top'].set_color('k')
    ax.spines['right'].set_color('k')
    ax.spines['bottom'].set_color('k')
    ax.spines['left'].set_color('k')
    
# Add a legend
l0 = mlines.Line2D([], [], color=colors[0], linestyle='-', label=r"$\lambda=0$")
l5 = mlines.Line2D([], [], color=colors[1], linestyle='-', label=r"$\lambda=0.05$")
l10 = mlines.Line2D([], [], color=colors[2], linestyle='-', label=r"$\lambda=0.1$")
l15 = mlines.Line2D([], [], color=colors[3], linestyle='-', label=r"$\lambda=0.15$")
l20 = mlines.Line2D([], [], color=colors[4], linestyle='-', label=r"$\lambda=0.2$")
l25 = mlines.Line2D([], [], color=colors[6], linestyle='-', label=r"$\lambda=0.25$")
pa = mlines.Line2D([], [], color='k', linestyle='-', label=r"$p_{soft}$")
pb = mlines.Line2D([], [], color='k', linestyle='-.', label=r"$p_{DM}$")
m = mlines.Line2D([], [], color='k', linestyle='--', label=r"$m(r)$")
ax1.legend(handles=[pa, l0, l5, pb, l10,l15, m, l20, l25], loc = "upper right", bbox_to_anchor=(0.99, 0.99), fontsize=15, frameon=True, fancybox=False, ncol = 3, edgecolor="black", framealpha=1, labelspacing=0.2, handletextpad=0.3, handlelength=1.4, columnspacing=1)

# Save the plot as a PDF
plt.title(rf'$\lambda$ Sweep Test: $EoS = {eos_c},$ $M_{{NS}} = 1$ 'r'$\left[ M_{\odot} \right],$ $m_{\chi}=$'rf'${dm_m} \left[ GeV \right].$', loc='left', fontsize=15, fontweight='bold')
plt.tight_layout()
plt.savefig(f"figures\LST_{eos_c}_{dm_m}_{p1_c}_NS_1.pdf", format="pdf", bbox_inches="tight")

plt.show()
"""
###############################################################################
# MR curves of DANS
###############################################################################
"""
data = {}

s_type = 3
d_type = 1
eos_list = ['soft', 'middle', 'stiff']
dm_m = 1.0
p2_c = 'l'
p2_list = [0.0, 0.01, 0.02, 0.03, 0.04, 0.05]

for eos_c in eos_list:
    for p2_v in p2_list:
        df = pd.read_csv(f"data\{s_type}_{d_type}_{eos_c}_{dm_m}_{p2_c}_{p2_v}.csv")
        data[f"{eos_c}_{p2_v}"] = df
        
plt.figure(figsize=(9.71, 6))
colors = sns.color_palette("Set1", 10)
eos_colors = {"soft": 0, "middle": 1, "stiff": 2}
linestyles = {0.0:'-', 0.01:'--', 0.02:'-.', 0.03:(0, (8, 3)), 0.04:(0, (5, 2, 1, 2, 1, 2)), 0.05:(0, (3, 2, 1, 2))}

for eos_c in eos_list:
    for p2_v in p2_list:
        plt.plot(data[f"{eos_c}_{p2_v}"]["R"], data[f"{eos_c}_{p2_v}"]["M"], label = rf'{eos_c}_{p2_v}', color = colors[eos_colors[f'{eos_c}']], linewidth = 1.5, linestyle = linestyles[p2_v], marker = "*",  mfc='k', mec = 'k', ms = 5)
        
# Add labels and title
plt.title(r'MR curves for the DANS: $m_{\chi}=$'rf'${dm_m}$'r' $\left[ GeV \right]$', loc='left', fontsize=15, fontweight='bold')
plt.xlabel(r'$R$ $\left[km\right]$', fontsize=15, loc='center')
plt.ylabel(r'$M$ $\left[ M_{\odot} \right]$', fontsize=15, loc='center')

# Set limits
plt.xlim(8, 17)
plt.ylim(0, 3.5)

# Configure ticks for all four sides
plt.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True, right=True)
plt.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True, right=True)
plt.minorticks_on()

# Customize tick spacing 
plt.gca().set_xticks(np.arange(8, 17.1, 1))  # Major x ticks 
plt.gca().set_yticks(np.arange(0, 3.51, 0.5))  # Major y ticks 

# Set thicker axes
plt.gca().spines['top'].set_linewidth(1.5)
plt.gca().spines['right'].set_linewidth(1.5)
plt.gca().spines['bottom'].set_linewidth(1.5)
plt.gca().spines['left'].set_linewidth(1.5)


# Add a legend
handles_list = []
for p2_v in p2_list:
    handle = mlines.Line2D([], [], color='k', linestyle=linestyles[p2_v], label=rf"$\lambda={p2_v}$")
    handles_list.append(handle)
plt.legend(handles=handles_list, loc = "upper left", bbox_to_anchor=(0.009, 0.99), fontsize=15, frameon=True, fancybox=False, ncol = 2, edgecolor="black", framealpha=1, labelspacing=0.2, handletextpad=0.3, handlelength=1.4, columnspacing=1)


# Save plot as PDF
plt.tight_layout()
plt.savefig(f"figures\MR_curves_DANS_{dm_m}.pdf", format="pdf", bbox_inches="tight")

plt.show()
"""
###############################################################################
# Stiffnes test for DANSs
###############################################################################
"""
data = {}

s_type = 3
d_type = 0
eos_c = 'soft'
dm_m = 0.45
p1_c = 'M'
p1_v = 1.0
p2_c = 'l'
p2_list = [0.0, 0.05, 0.1, 0.15, 0.2, 0.25]

for p2_v in p2_list:
    df = pd.read_csv(f"data\{s_type}_{d_type}_{eos_c}_{dm_m}_{p1_c}_{p1_v}_{p2_c}_{p2_v}.csv")
    data[f'{p2_v}'] = df

# Configure the plot
fig, ax1 = plt.subplots(figsize=(9.71, 6))
colors = sns.color_palette("Set1", 12)
c=0

# Set the axis.
ax1.set_xlabel(r'$r$ $\left[km\right]$', fontsize=15, loc='center')
ax1.set_ylabel(r'$p$ $\left[ M_{\odot} / km^3 \right]$', fontsize=15, loc='center', color='k')
ax1.tick_params(axis='y', colors='k')
ax1.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))
ax1.ticklabel_format(style='sci', axis='y', scilimits=(-3, 3))
#ax1.set_yscale('log')
#ax2 = ax1.twinx()
#ax2.set_ylabel(r'$m$ $\left[ M_{\odot} \right]$', fontsize=15, loc='center', color='k')
#ax2.tick_params(axis='y', colors='k')

## The plot thickenss
for p2_v in p2_list:
    if c == 5:
        c+=1
    ax1.plot(data[f'{p2_v}']['r'], data[f'{p2_v}']['p_A'], color = colors[c], linewidth=1.5, linestyle='-')
    ax1.plot(data[f'{p2_v}']['r'], data[f'{p2_v}']['p_B'], color = colors[c], linewidth=1.5, linestyle='-.')
    #ax2.plot(data[f'{p2_v}']['r'], data[f'{p2_v}']['m'], color = colors[c], linewidth=1.5, linestyle='--')
    c+=1

# Set limits
ax1.set_xlim(0, 9.9)
ax1.set_ylim(2e-14, 2e-4)
#ax2.set_ylim(0, 1.4)

# Configure ticks
ax1.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True)
ax1.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True)
ax1.minorticks_on()
#ax2.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True, right=True)
#ax2.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True, right=True)
#ax2.minorticks_on()

# Configure ticks spacing
ax1.set_xticks(np.arange(0, 9.9, 1))
#ax1.set_xticks(np.arange(0, 9.6, 0.2), minor=True)
ax1.set_yticks(np.logspace(-13, -4, num=10))
#ax1.set_yticks(np.arange(0, 8.1e-5, 0.2e-5), minor=True)
#ax2.set_yticks(np.arange(0, 1.41, 0.2))
#ax2.set_yticks(np.arange(0, 1.01, 0.02), minor=True)

# Set thicker axes
for ax in [ax1]:
    ax.spines['top'].set_linewidth(1.5)
    ax.spines['right'].set_linewidth(1.5)
    ax.spines['bottom'].set_linewidth(1.5)
    ax.spines['left'].set_linewidth(1.5)
    ax.spines['top'].set_color('k')
    ax.spines['right'].set_color('k')
    ax.spines['bottom'].set_color('k')
    ax.spines['left'].set_color('k')
    
# Add a legend
handles_list = []
c=0
for p2_v in p2_list:
    if c==5:
        c+=1
    handle = mlines.Line2D([], [], color=colors[c], linestyle='-', label=rf"$\lambda={p2_v}$")
    handles_list.append(handle)
    c+=1
plt.legend(handles=handles_list, loc = "center left", bbox_to_anchor=(0.009, 0.5), fontsize=15, frameon=True, fancybox=False, ncol = 2, edgecolor="black", framealpha=1, labelspacing=0.2, handletextpad=0.3, handlelength=1.4, columnspacing=1)
    
# Save plot as PDF
plt.title(rf'Siffnes test for a DANS: $EoS={eos_c},$ $m_{{\chi}}={dm_m},$ ${p1_c} = {p1_v}.$', loc='left', fontsize=15, fontweight='bold')
plt.tight_layout()
plt.savefig(f"figures\stiffness_test_DANS_{eos_c}_{dm_m}_{p1_c}_{p1_v}.pdf", format="pdf", bbox_inches="tight")

plt.show()
"""
###############################################################################
# Lambda vs Radius plot (LvR)
###############################################################################

data = {}

s_type = 3
d_type = 0
eos_c = 'soft'
dm_mlist = [0.45, 1.0, 1.5]
p1_c = 'M'
p1_v = 1.0
p2_c = 'l'
p2_list = [0.0, 0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25]


for dm_m in dm_mlist:
    r_list = []
    for p2_v in p2_list:
        
        df = pd.read_csv(f"data\{s_type}_{d_type}_{eos_c}_{dm_m}_{p1_c}_{p1_v}_{p2_c}_{p2_v}.csv")
        r_list.append(df['R_A'].tail(1).iloc[0])
    data[f"{dm_m}"] = {'R':r_list, 'l':p2_list}
    
# Configure the plot
plt.figure(figsize=(9.71, 6))
colors = sns.color_palette("Set1", 10)

#plot the lines
c=0
for dm_m in dm_mlist:
    plt.plot(data[f"{dm_m}"]["l"], data[f"{dm_m}"]["R"], label = rf'$m_{{\chi}} = {dm_m}$', color = colors[c], linewidth=1.5, linestyle='-', marker = "*",  mfc='k', mec = 'k', ms = 5)
    c+=1

# Add labels and title
plt.title(rf'Lambda vs Radius: $EoS = {eos_c},$ $M={p1_v}.$', loc='left', fontsize=15, fontweight='bold')
plt.xlabel(r'$\lambda$', fontsize=15, loc='center')
plt.ylabel(r'$R$ $\left[ km \right]$', fontsize=15, loc='center')

# Set limits
plt.xlim(-0.01, 0.26)
plt.ylim(8.25, 10)

# Configure ticks for all four sides
plt.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True, right=True)
plt.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True, right=True)
plt.minorticks_on()

# Customize tick spacing
plt.gca().set_xticks(np.arange(0, 0.251, 0.05))  # Major x ticks 
plt.gca().set_yticks(np.arange(8.25, 10.1, 0.25))  # Major y ticks 

# Set thicker axes
plt.gca().spines['top'].set_linewidth(1.5)
plt.gca().spines['right'].set_linewidth(1.5)
plt.gca().spines['bottom'].set_linewidth(1.5)
plt.gca().spines['left'].set_linewidth(1.5)

# Add a legend
plt.legend(fontsize=15, frameon=True, fancybox=False, ncol = 1, edgecolor="black", framealpha=1, labelspacing=0.2, handletextpad=0.3, handlelength=1.4, columnspacing=1)

# Save plot as PDF
plt.tight_layout()
plt.savefig(f"figures\LvR_{eos_c}_{p1_c}_{p1_v}.pdf", format="pdf", bbox_inches="tight")

plt.show()
