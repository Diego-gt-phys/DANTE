# -*- coding: utf-8 -*-
"""
Created on Mon Mar 24 11:39:36 2025

Reads and plots data generated by DANTE.py.

The objective of this is to see how the mass of the dark matter particle affects 
the structure of a DANS by keeping the rest of the parameters (pc, eos, lambda) fixed.

@author: Diego Garc√≠a Tejada
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

###############################################################################
# Read the data
###############################################################################

data = {}
DM_masses = [0.4, 0.5, 0.75, 1, 1.25, 1.5]
d_type, eos_c, param_c, param_val, p_c = [3, 'soft', 'l', 0.1, 1e-5]
for DM_mass in DM_masses:
    df = pd.read_csv(rf"..\data\{d_type}_{eos_c}_{param_c}_{param_val}_{p_c}_{DM_mass}.csv")
    data[f"{DM_mass}"] = df
    
###############################################################################
# Plot the data
###############################################################################

plt.figure(figsize=(9.71, 6))
colors = sns.color_palette("Set1", 10)
base_purple = sns.color_palette("Set1", 10)[3] 
purple_shades = sns.dark_palette(base_purple, n_colors=7, reverse=True)

# Scale factors
p_scale = 5
m_scale = 1

c=0
for DM_mass in DM_masses:
    if c == 5:
        c += 1

    plt.plot(data[f"{DM_mass}"]["r"], data[f"{DM_mass}"]["p_B"]*10**p_scale, label=rf"$m_{{\chi}}={DM_mass}$", color = colors[c], linewidth = 1.5, linestyle = '-')
    plt.axvline(data[f"{DM_mass}"]['R_A'][0], color=colors[c], linewidth=1.5, linestyle='-')
    c+=1
    
###############################################################################
# Configure the plot
###############################################################################
# Set the axis to logarithmic scale
#plt.xscale('log')
plt.yscale('log')

# Add labels and title
plt.title(rf'How does $m_{{\chi}}$ affect DANS with $\lambda = {param_val}$', loc='left', fontsize=15, fontweight='bold')
plt.xlabel(r'$r$ $\left[km\right]$', fontsize=15, loc='center')
plt.ylabel(rf'$p \cdot 10^{p_scale}$ $\left[ M_{{\odot}}/km^3\right]$', fontsize=15, loc='center')
plt.axhline(0, color='k', linewidth=1.0, linestyle='--')  # x-axis
plt.axvline(0, color='k', linewidth=1.0, linestyle='--')  # y-axis

# Set limits
plt.xlim(0, 30)
plt.ylim(7.4e-12, 1)

# Add grid
#plt.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5)

# Configure ticks for all four sides
plt.tick_params(axis='both', which='major', direction='in', length=8, width=1.2, labelsize=12, top=True, right=True)
plt.tick_params(axis='both', which='minor', direction='in', length=4, width=1, labelsize=12, top=True, right=True)
plt.minorticks_on()

# Customize tick spacing for more frequent ticks on x-axis
#plt.gca().set_xticks(np.arange(2.5, 29.57, 2.5))  # Major x ticks 
#plt.gca().set_yticks(np.arange(0, 1.01, 0.2))  # Major y ticks 

# Set thicker axes
plt.gca().spines['top'].set_linewidth(1.5)
plt.gca().spines['right'].set_linewidth(1.5)
plt.gca().spines['bottom'].set_linewidth(1.5)
plt.gca().spines['left'].set_linewidth(1.5)

# Add a legend
plt.legend(fontsize=12, frameon=False, ncol = 2) #  loc='upper right',

# Save the plot as a PDF
plt.savefig(f"DM_mass_comparation_{eos_c}_{param_c}_{param_val}_{p_c}.pdf", format="pdf", bbox_inches="tight")

plt.tight_layout()
plt.show()